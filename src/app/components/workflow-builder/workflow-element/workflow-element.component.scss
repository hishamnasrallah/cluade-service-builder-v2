.workflow-element {
  position: relative;
  cursor: move;
  transition: all 0.3s ease;
  user-select: none;
  display: flex;
  flex-direction: column;
  color: white;
  font-weight: 500;
  filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
  border: 2px solid rgba(255,255,255,0.3);
  border-radius: 8px;
}

// Ensure expanded elements create a new stacking context
.workflow-element.expanded {
  background-color: rgba(58,131,165,0.75) !important;
  border-style: dashed !important;
  cursor: move;
  position: relative;
  isolation: isolate; // Creates a new stacking context
}
/* Only the children container area should not be draggable */
.children-container {
  position: relative;
  padding: 20px;
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  align-items: flex-start;
  justify-content: center;
  animation: fadeIn 0.3s ease-out;
  z-index: 1;
  cursor: default; /* Prevent drag cursor in children area */
  background-color: transparent !important; // Ensure transparent background
}
.element-container {
  position: absolute;
  pointer-events: all;
  transition: z-index 0.2s ease;

}

.workflow-element.not-draggable,
.workflow-element.not-draggable .element-content {
  cursor: default !important;
}

// Ensure child elements in containers are not draggable
.children-container .workflow-element {
  cursor: default !important;
  position: relative !important;
  z-index: auto !important;
}

.workflow-element.container {
  padding: 8px;
}

.workflow-element:hover {
  filter: drop-shadow(0 4px 8px rgba(0,0,0,0.2));
  transform: translateY(-1px);
}

.workflow-element.selected {
  filter: drop-shadow(0 0 10px #4CAF50);
}

.workflow-element.dragging {
  cursor: grabbing;
  opacity: 0.8;
  z-index: 1000;
}

/* Element type specific styles */
.workflow-element.start,
.workflow-element.end {
  border-radius: 50%;
  justify-content: center;
  align-items: center;
}

.workflow-element.condition {
  transform: rotate(45deg);
}

.workflow-element.condition .element-content {
  transform: rotate(-45deg);
}

.element-content {
  position: relative;
  z-index: 2;
  padding: 8px;
  pointer-events: auto;
  cursor: inherit; /* Inherit cursor from parent */
}

.element-header {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  position: relative;
  padding-right: 24px; /* Make room for expand icon */
}

.expand-icon {
  position: absolute;
  right: 4px;
  font-size: 20px;
  width: 20px;
  height: 20px;
  cursor: pointer;
  color: white;
  opacity: 0.8;
  transition: opacity 0.2s ease, transform 0.2s ease;

  /* Add text shadow for better visibility */
  text-shadow: 0 1px 3px rgba(0,0,0,0.5);

  &:hover {
    opacity: 1;
    transform: scale(1.1);
  }
}

.workflow-element.field .element-icon {
  font-size: 20px;
  width: 20px;
  height: 20px;
}

.element-title {
  font-size: 14px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 120px;
}

.element-summary {
  margin-top: 8px;
  display: flex;
  flex-direction: column;
  gap: 4px;
  font-size: 11px;
  opacity: 0.9;
  text-align: center;
}

.expand-button-svg {
  position: absolute;
  top: 4px;
  right: 4px;
  width: 24px;
  height: 24px;
  padding: 4px;
  background: transparent;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 10;
  transition: transform 0.2s ease, opacity 0.2s ease;
  opacity: 0.7;

  &:hover {
    opacity: 1;
    transform: scale(1.1);
  }

  &:focus {
    outline: none;
  }

  .svg-icon {
    width: 16px;
    height: 16px;
    fill: currentColor;
    color: white;
    filter: drop-shadow(0 1px 2px rgba(0,0,0,0.4));
  }
}

/* Remove the old expand-button class styles if they exist */
.expand-button {
  display: none;
}
//* Remove any Material button styling that might add background */
//.expand-button::ng-deep .mat-mdc-button-persistent-ripple {
//  display: none;
//}
//
//.expand-button::ng-deep .mat-mdc-button-state {
//  display: none;
//}
.children-container {
  position: relative;
  padding: 20px;
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  align-items: flex-start;
  justify-content: center;
  animation: fadeIn 0.3s ease-out;
  z-index: 1; // Above the parent's background but within its context
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.children-container app-workflow-element {
  position: relative !important;
  animation: childFadeIn 0.3s ease-out;
}

@keyframes childFadeIn {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

// Add connection points on all sides
.connection-points {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

// Connection points on all sides
.connection-point {
  position: absolute;
  width: 12px;
  height: 12px;
  background: white;
  border: 2px solid #666;
  border-radius: 50%;
  pointer-events: all;
  cursor: crosshair;
  z-index: 10;
  opacity: 0;
  transition: opacity 0.2s;
}

.workflow-element:hover .connection-point {
  opacity: 1;
}

// Style differently for input vs output
.connection-point.input {
  background: #4CAF50;
  border-color: #388E3C;
}

.connection-point.output {
  background: #2196F3;
  border-color: #1976D2;
}

// Left side
.connection-point.input-left,
.connection-point.output-left {
  top: 50%;
  left: -6px;
  transform: translateY(-50%);
}

// Right side
.connection-point.input-right,
.connection-point.output-right {
  top: 50%;
  right: -6px;
  transform: translateY(-50%);
}

// Top side
.connection-point.input-top,
.connection-point.output-top {
  left: 50%;
  top: -6px;
  transform: translateX(-50%);
}

// Bottom side
.connection-point.input-bottom,
.connection-point.output-bottom {
  left: 50%;
  bottom: -6px;
  transform: translateX(-50%);
}

// Special case for start element (only output on right)
.workflow-element.start .connection-point.output {
  display: none;
}
.workflow-element.start .connection-point.output-right {
  display: block;
}

// Special case for end element (only input on left)
.workflow-element.end .connection-point.input {
  display: none;
}
.workflow-element.end .connection-point.input-left {
  display: block;
}

/* Hide connection points for child elements */
.children-container .connection-points {
  display: none;
}
.empty-container-message {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 40px;
  color: rgba(255, 255, 255, 0.6);
  font-size: 14px;
  text-align: center;

  mat-icon {
    font-size: 48px;
    width: 48px;
    height: 48px;
    margin-bottom: 8px;
    opacity: 0.5;
  }

  span {
    font-weight: 300;
  }
}

.menu-trigger {
  position: fixed;
  width: 1px;
  height: 1px;
  opacity: 0;
  pointer-events: none;
  z-index: 9999;
}

// Make input points visible when in connecting mode
.connection-point.input.active {
  opacity: 1 !important;
  animation: pulse 1s infinite;
}

@keyframes pulse {
  0% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7);
  }

  70% {
    transform: scale(1.1);
    box-shadow: 0 0 0 6px rgba(76, 175, 80, 0);
  }

  100% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);
  }
}

// Hide output points when connecting
.workflow-element.connecting .connection-point.output {
  display: none !important;
}
.workflow-element.connection-target {
  border: 2px dashed #4CAF50;
  box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
  animation: pulse-border 1s infinite;
}

@keyframes pulse-border {
  0% {
    border-color: #4CAF50;
    box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
  }
  50% {
    border-color: #81C784;
    box-shadow: 0 0 20px rgba(76, 175, 80, 0.8);
  }
  100% {
    border-color: #4CAF50;
    box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
  }
}
